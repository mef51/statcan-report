#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass report
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman palatino
\font_sans default
\font_typewriter courier
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing other 1.5
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.54cm
\topmargin 2.54cm
\rightmargin 2.54cm
\bottommargin 2.54cm
\headheight 0cm
\headsep 0cm
\footskip 0cm
\secnumdepth -1
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Work Term Report
\end_layout

\begin_layout Author
Mohammed A.
 Chamma
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
My name is Mohammed.
 I'm a third-year student in Physics-Mathematics.
 For my first coop work term I was part of the Modeling Division at Statistics
 Canada in Tunney's Pasture, Ottawa.
 This report is a description of my time there, the environment I was a
 part of, and the projects I was involved in.
 
\end_layout

\begin_layout Standard
The Modeling Division is responsible for creating mathematical and computer
 simulation models of Canadian citizens.
 We use real statistical data collected by StatCan to make these models
 representative of real society.
 I worked on a model called LifePaths, which is categorized as a 
\emph on
microsimulation
\emph default
 model.
 LifePaths is a computer program that aims to simulate many aspects of Canadian
 society, including education, fertility, mortality, wages, taxes and many
 more.
 When you start LifePaths, you specify the size of the population you want
 to simulate, and you have the option of changing some parameters, for example,
 life expectancy.
 When you start the simulation, LifePaths creates a virtual Canadian and
 starts simulating this virtual Canadian's life, including basic details
 like gender and province of residence, and more complicated details like
 whether or not this person finished highschool, how many children they
 have, and so on.
 LifePaths simulates this person's entire life and when that virtual Canadian
 dies, it simulates the next Canadian's life, until it reaches the population
 size you chose at the beginning.
 These virtual Canadian's are statistically similar to real Canadians.
 When LifePaths decides, for example, what program of study a person enters,
 it knows what the statistical distribution of programs of study of real
 Canadians are, and draws from this distribution.
 Though none of the simulated Canadians in LifePaths exist in reality, the
 entire population of virtual Canadians are statistically similar to the
 actual population.
 When the LifePaths model finishes simulating a population, it surveys the
 virtual population and outputs tables specified by a researcher.
 These tables can be compared with real data, and in this way we can validate
 whether the virtual population matches the real population.
 
\end_layout

\begin_layout Standard
Why would you want to be able to create a virtual population that somehow
 matches the real population? Having a virtual population lets you make
 a change and observe the impact on the population, without harming anyone
 or wasting lots of money.
 LifePaths is programmed with a set of 
\emph on
parameters.

\emph default
 These parameters form a 
\emph on
scenario
\emph default
.
 The parameters encompass a multitude of things, like migration rates into
 and out of the country, average wages for different jobs, fertility rates,
 probabilities of becoming disabled, the percentage of taxes one owes, and
 so on.
 By changing these parameters we can create new scenarios, run the simulation,
 and observe the impact on the population.
 How would populations distributions change if the migration rate were to
 increase by so-and-so amount? Who would benefit the most if we cut taxes?
 LifePaths is a tool that lets you pose these questions and attempt to answer
 them with statistical arguments.
\end_layout

\begin_layout Standard
I was located on the 24th floor of the 26-story R.H.
 Coats building at Tunney's Pasture.
 The Modeling Division I was a part of is made up of about ten people, and
 included PhDs, researchers, and another coop student (also from uOttawa).
 We each had our own cubicle with high walls and a work computer.
 None of the regular work computers are connected to the internet --occasionally
 we had access to confidential data and having these computers connected
 to the internet is considered a security risk.
 Each floor has a set of shared computers (one or two at each corner of
 the floor) that are connected to the internet and can be used for browsing.
\end_layout

\begin_layout Standard
The LifePaths model was programmed in a language called 
\emph on
Modgen
\emph default
.
 Modgen was developped a few years ago by Statistics Canada and is used
 (as the name suggests) to generate socio-economic models.
 Modgen is a language that compiles to the more standard C++ programming
 language, used worldwide in all sorts of software.
 The benefit of Modgen is that it is simpler to write than C++.
 Modgen introduces many constructs and general ideas that are useful in
 creating simulation models that C++ doesn't have, making it easier for
 modelers and statisticians to focus solely on their model, rather than
 the underlying technical details.
 Since Modgen code compiles into C++, we can retain the performance and
 speed that C++ offers.
 This is important as large simulations can take a very long time.
\end_layout

\begin_layout Standard
During my work term, the team was hired by Health Canada for a project with
 LifePaths.
 Health Canada wanted to understand the future costs of paying for different
 types of homecare for seniors.
 LifePaths can simulate people's lives in the future based on population
 projections and so create a projection of what the costs would be.
 Health Canada also asked the Modeling Division to investigate different
 scenarios: what would it be like if the government paid for 100% of the
 costs? What would it be like if the government paid for 80% of the costs
 and seniors the rest? LifePaths also allowed us to investigate how many
 people would even be able to pay for their care if they were required to.
 
\end_layout

\begin_layout Standard
The Health Canada project involved programming new modules into the simulation
 to simulate the different types of homecare a person could receive, and
 assigning homecare to people with a set probability.
 To get these probabilities (so that they reflected reality) we analysed
 data in the National Population Health Survey (NPHS), which asks respondents,
 amongst other things, if they received homecare and what kind of homecare
 they received.
\end_layout

\begin_layout Standard
While most of the team was kept busy with the Health Canada project, there
 was also a project to renew and create a new release version of LifePaths.
 LifePaths was in a state where there were hundreds of tables that few understoo
d, modules that were never used, and multiple different versions from people
 adding their own features and then never merging them all together again.
 I was given the task of merging the different versions together and to
 create a clean, releasable version of LifePaths.
 This clean version of LifePaths would also serve as a starting point for
 future LifePaths projects.
\end_layout

\begin_layout Section
Tasks Completed
\end_layout

\begin_layout Standard
While I was at StatCan I worked on the following things:
\end_layout

\begin_layout Itemize
Created a prototype version of the HomeCare simulation module.
\end_layout

\begin_layout Itemize
Introduced and used source control software to carry out the merge and track
 changes.
 This let me build a history of changes made that served as documentation.
\end_layout

\begin_layout Itemize
Presented about the source control software I used (called 'git') to the
 team.
 I explained a bit about how it worked, how to use it, and how I was using
 it for LifePaths.
\end_layout

\begin_layout Itemize
Validated that my merged version of LifePaths still behaved as expected
 by comparing it's output with previous versions of LifePaths and with real
 statistical data.
 This involved a suite of graphs that plotted various statistics.
 These statistics included population by province, unemployment rate since
 1971, earnings by province, births by year, and many more.
 
\end_layout

\begin_layout Section
Microsimulation and LifePaths
\end_layout

\begin_layout Standard
LifePaths is referred to as a 
\emph on
microsimulation
\emph default
 model.
 The 
\emph on
micro
\emph default
 in 
\emph on
microsimulation
\emph default
 refers to the fact that the simulation models the behaviour of single individua
ls, as opposed to modelling aggregate (or macro) statistics.
 For example, one can collect data on a population's size every year, and
 then construct a model (or function) that fits the data.
 This function however does not give you any information about the individual
 units of the population, for example the birth and death year of each person
 in the population.
 In this example the macro data is the size of the population and the micro
 data is the birth and death year of each person.
 Microsimulation (LifePaths specifically) tries to recreate the macrodata
 (population size) by simulating the microdata (birth and death years) of
 individuals.
 When a simulation is complete LifePaths aggregates the data (in effect
 by conducting a survey) of the simulated individuals and outputs statistics
 that can be compared with real statistics.
 
\end_layout

\begin_layout Standard
A consequence of microsimulation is that it is possible to examine in details
 the lives of each simulated individual.
 Included with Modgen is a tool called the BioBrowser.
 BioBrowser graphically displays how a person's traits change in time.
 For example, we can use BioBrowser to see a person's disability state (no
 disability, light disability, severe disability) throughout their life.
 This lets us verify that the lives of the people we're simulating make
 sense in reality.
 
\end_layout

\begin_layout Standard
Microsimulation is a relatively new field.
 It was first proposed by an Englishman named Guy Orcutt in 1957 in a paper
 titled 
\begin_inset Quotes eld
\end_inset

A new type of socio-economic system
\begin_inset Quotes erd
\end_inset

.
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Orcutt G (1957) 'A new type of socio-economic system', 
\emph on
Review of Economics and Statistics, 
\emph default
39(2), 116-132.
\end_layout

\end_inset

 Over time more and more statistical agencies have started their own microsimula
tion models to address a whole host of issues.
 Other than LifePaths, Statistics Canada has microsimulation models for
 the tax and transfers system, health care analysis, and population projections.
\end_layout

\begin_layout Section
The Modgen Programming Language
\end_layout

\begin_layout Standard
The LifePaths model is written in the Modgen language.
 Modgen allows you to use language constructs that are tailored for writing
 socio-economic models.
 It also abstracts away some lower-level details of how the simulation runs
 and creates an executable file with it's own visual interface for running
 the simulation model.
 This allows statisticians to develop the model without the need of a programmer
 and lets the developer focus more on the details of the model and less
 on the implementation of an interface.
 In short, Modgen is a language for specifying 
\emph on
actors
\emph default
 and simulating their lives by specifying the 
\emph on
events 
\emph default
that can happen to them.
 In LifePaths, the actor is a Person and the events are life events.
 Persons can get married, suffer an accident, go to university, have children,
 and so on.
\end_layout

\begin_layout Subsubsection
Actors
\end_layout

\begin_layout Standard
Let's say we were working on a Modgen microsimulation model and wanted to
 create a Person actor.
 We want to simulate the number of children this person has throughout their
 life.
 We can declare the actor in a file for Modgen like this:
\end_layout

\begin_layout Standard
\paragraph_spacing single
\begin_inset listings
lstparams "basicstyle={\normalsize\ttfamily},extendedchars=true,language={C++},numbers=left,numberstyle={\footnotesize},tabsize=4"
inline false
status open

\begin_layout Plain Layout
\paragraph_spacing single
\noindent

actor Person {
\end_layout

\begin_layout Plain Layout
\paragraph_spacing single
\noindent

	int numOfChildren = {0};
\end_layout

\begin_layout Plain Layout
\paragraph_spacing single
\noindent

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Modgen automatically tracks each actor's age (
\begin_inset listings
lstparams "basicstyle={\ttfamily},language={C++}"
inline true
status open

\begin_layout Plain Layout

int age
\end_layout

\end_inset

) and the current 
\begin_inset listings
lstparams "basicstyle={\ttfamily},language={C++}"
inline true
status open

\begin_layout Plain Layout

year
\end_layout

\end_inset

 of the simulation.
 The variables 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

numOfChildren
\end_layout

\end_inset

, 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

age
\end_layout

\end_inset

, and 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

year
\end_layout

\end_inset

 are called actor 
\emph on
states.
 
\emph default
We'll use the variable 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

numOfChildren
\end_layout

\end_inset

 to track the number of children each simulated Person has.
 
\end_layout

\begin_layout Subsubsection
Events
\end_layout

\begin_layout Standard
What we need now is a way for a Person 
\begin_inset Quotes eld
\end_inset

to have a child
\begin_inset Quotes erd
\end_inset

, and then to increase the 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

numOfChildren
\end_layout

\end_inset

 variable when that happens.
 Modgen provides an 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

event
\end_layout

\end_inset

 construct where we can define what the event of 
\begin_inset Quotes eld
\end_inset

having a child
\begin_inset Quotes erd
\end_inset

 means.
 Modgen events require two functions.
 The first function is called the time function.
 The time function determines 
\emph on
when
\emph default
 the event happens.
 The second function is the event function and it gets run when the event
 happens.
\end_layout

\begin_layout Standard
Time in LifePaths (and most Modgen simulations) is considered continuous.
 This is possible because instead of using a clock that ticks regularly
 to schedule events, very precise 
\emph on
waiting times 
\emph default
for events are generated and the simulation jumps to the event that has
 the smallest waiting time.
 Thus, the time function of an event must generate a waiting time for the
 event.
 These time functions can depend on all the other states of the Person.
 For example, if we have a 
\begin_inset Quotes eld
\end_inset

death
\begin_inset Quotes erd
\end_inset

 event, and your age is young, we might calculate a very large waiting time,
 as younger people are less likely to die.
 If your age is very old, we would calculate a much shorter waiting time.
 This means that every time the age changes, we want to recalculate the
 waiting time of the event, to capture this new information.
\end_layout

\begin_layout Standard
The general flow of the simulation of an actor goes like this: 
\end_layout

\begin_layout Enumerate
\paragraph_spacing single
Call all the time functions of all the events.
 This gives you a list of waiting times.
\end_layout

\begin_layout Enumerate
\paragraph_spacing single
Call the event function for the event with the smallest waiting time.
 This is the event that happens 
\begin_inset Quotes eld
\end_inset

next
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
\paragraph_spacing single
Recalculate all the waiting times of all the events.
\end_layout

\begin_layout Enumerate
\paragraph_spacing single
Repeat.
\end_layout

\begin_layout Standard
This loop repeats until one of the events ends the simulation for the actor
 (like a death event).
 Modgen takes care of all the details of the loop and all the researcher
 has to do is define what the event functions are.
 If a researcher wants some kind of timekeeping to, for example, know what
 month an event happens, then the researcher creates a 
\begin_inset Quotes eld
\end_inset

month
\begin_inset Quotes erd
\end_inset

 event, whose waiting time is always 1/12 of a year.
 The year state is updated automatically by Modgen.
\end_layout

\begin_layout Standard
\paragraph_spacing single
To create a 
\begin_inset Quotes eld
\end_inset

have a child
\begin_inset Quotes erd
\end_inset

 event, you declare the event in the actor block of your file:
\begin_inset listings
lstparams "basicstyle={\normalsize\ttfamily},extendedchars=true,language={C++},numbers=left,numberstyle={\footnotesize},tabsize=4"
inline false
status open

\begin_layout Plain Layout
\paragraph_spacing single
\noindent

actor Person {
\end_layout

\begin_layout Plain Layout
\paragraph_spacing single
\noindent

	int numOfChildren = {0};
\end_layout

\begin_layout Plain Layout

	event timeChildEvent, ChildEvent;
\end_layout

\begin_layout Plain Layout
\paragraph_spacing single
\noindent

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this case, the time function is 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

timeChildEvent
\end_layout

\end_inset

 and the event function is 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ChildEvent
\end_layout

\end_inset

.
 The time function will come up with a waiting time based on the likelihood
 of having a child and the event function will simply increment 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

numOfChildren
\end_layout

\end_inset

 by one every time the Person has a child.
 
\end_layout

\begin_layout Standard
As an example, let's construct an oversimplified probability model of the
 likelihood of having a child based on age.
 Let's say a person has zero chance of having a child at their age if their
 age is under 16, a 60% chance if they are between 16 and 30, a 40% chance
 if they are between 30 and 60, and no chance after that.
 If we had a function 
\begin_inset Formula $P(x)$
\end_inset

 that represented the 
\emph on
probability of having a child during age 
\begin_inset Formula $x$
\end_inset

 
\emph default
with 
\begin_inset Formula $x$
\end_inset

 as an 
\emph on
integer, 
\emph default
this could be written as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
P(x)=\begin{cases}
0 & x\leq16\\
\frac{0.6}{30-16} & 16<x\leq30\\
\frac{0.4}{60-30} & 30<x\leq60\\
0 & otherwise
\end{cases}=\begin{cases}
0 & x\leq16\\
\frac{0.6}{14} & 16<x\leq30\\
\frac{0.4}{30} & 30<x\leq60\\
0 & otherwise
\end{cases}
\]

\end_inset


\end_layout

\begin_layout Standard
We divide by the width of the age interval so that 
\begin_inset Formula $P(x)$
\end_inset

 is normalized.
 We would implement this model in Modgen with this function:
\end_layout

\begin_layout Standard
\paragraph_spacing single
\begin_inset listings
lstparams "basicstyle={\normalsize\ttfamily},extendedchars=true,language={C++},numbers=left,numberstyle={\footnotesize},tabsize=4"
inline false
status open

\begin_layout Plain Layout
\paragraph_spacing single
\noindent

TIME Person::timeChildEvent()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	TIME waitingTime; //declare variable
\end_layout

\begin_layout Plain Layout

	if(age <= 16){
\end_layout

\begin_layout Plain Layout

		waitingTime = TIME_INFINITE;
\end_layout

\begin_layout Plain Layout

	} else if(16 < age && age <= 30) {
\end_layout

\begin_layout Plain Layout

		if(RandUniform() < 0.6/(30-16)) {
\end_layout

\begin_layout Plain Layout

			waitingTime = 0; //0 means this is the next event
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	} else if(30 < age && age <= 60) {
\end_layout

\begin_layout Plain Layout

		if(RandUniform() < 0.4/(60-30)){
\end_layout

\begin_layout Plain Layout

			waitingTime = 0; //0 means this is the next event
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	} else {
\end_layout

\begin_layout Plain Layout

		waitingTime = TIME_INFINITE;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return waitingTime;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

RandUniform()
\end_layout

\end_inset

 returns a 
\emph on
uniformly 
\emph default
distributed random number between 0 and 1.
 This means that boolean expressions in the form 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

RandUniform() < p
\end_layout

\end_inset

 have a probability 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

p
\end_layout

\end_inset

 of being true.
 Now all that's left is to implement the event function.
 The event function simply increments the state of 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

numOfChildren
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing single
\begin_inset listings
lstparams "basicstyle={\normalsize\ttfamily},extendedchars=true,language={C++},numbers=left,numberstyle={\footnotesize},tabsize=4"
inline false
status open

\begin_layout Plain Layout
\paragraph_spacing single
\noindent

void Person::ChildEvent()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	numOfChildren = numOfChildren + 1;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The two event functions are all that's needed to implement this simple model.
 Modgen takes care of the details including scheduling the event and keeping
 track of the age and time of each actor.
 From here you compile the model and Modgen creates an executable file that
 has a visual interface to the model.
 In the interface the user can specify the size of the population to simulate.
 To create some useful output, you can create tables with Modgen's tabling
 language using the variable 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

numOfChildren
\end_layout

\end_inset

.
 These tables act as surveys and Modgen fills in the table as it simulates
 the actors.
 At the end, a spreadsheet table is displayed with output that can be copied
 to other tools like Microsoft Excel or Stata so that graphs can be made.
 In this way we can validate that the simulation is giving output that agrees
 with the model we implemented, or that the simulated data matches with
 some real data.
\end_layout

\begin_layout Subsubsection
Parameters
\end_layout

\begin_layout Standard
Another feature of Modgen is the ability to specify 
\emph on
parameters
\emph default
 that can be changed from scenario to scenario by a user through the visual
 interface.
 Let's say we wanted to investigate a scenario in the above example where
 16 year olds had a very high chance of having a child.
 One way to do this would be to simply change the code of the model.
 Changing the code however isn't very flexible when a researcher wants to
 investigate a wide variety of scenarios.
 What could be done instead is to specify a parameter in the code that represent
s the probability of having a child during age 
\begin_inset Formula $x$
\end_inset

.
 The time function would access this parameter when calculating waiting
 times, and the parameter can be changed through the visual interface by
 the researcher.
 The visual interface displays a spreadsheet like table (in this case it
 would be a table of probabilities by age) and values can be entered or
 pasted in from some external program.
 These modifications to the parameter don't require you to recompile the
 code, or even to have access to the code, and can be saved as a seperate
 scenario file with it's own output.
 In this way a researcher can create a set of 
\begin_inset Quotes eld
\end_inset

what-if
\begin_inset Quotes erd
\end_inset

 scenarios when investigating an issue.
 
\end_layout

\begin_layout Standard
To declare a parameter in Modgen, you specify the type of the parameter
 (a real number), its name, and its dimensions (in this case, age).
 Since we're using age and age is treated as a continuous variable, we also
 create a 
\emph on
partition
\emph default
 to divide up a person's age into discrete groups of our choosing:
\end_layout

\begin_layout Standard
\paragraph_spacing single
\begin_inset listings
lstparams "basicstyle={\normalsize\ttfamily},extendedchars=true,language={C++},numbers=left,numberstyle={\footnotesize},tabsize=4"
inline false
status open

\begin_layout Plain Layout

partition AGE_GROUPS {
\end_layout

\begin_layout Plain Layout

	5 , 10, 15, 20, 25, 30, 35, 40, 45, 50, 
\end_layout

\begin_layout Plain Layout

	55, 60, 65, 70, 75, 80, 85, 90, 95 
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\noindent

parameters {
\end_layout

\begin_layout Plain Layout

	double ChildBirthProbability[AGE_GROUPS];
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This tells Modgen to create a parameter table in the visual interface for
 the parameter 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ChildBirthProbability
\end_layout

\end_inset

 and the number of entries to have based on the number of divisions in the
 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

AGE_GROUPS
\end_layout

\end_inset

 partition.
 Default values for the parameter are specified by another file that Modgen
 makes a copy of whenever a new scenario is created.
\end_layout

\begin_layout Standard
Having a parameter simplifies the implementation of our time function.
 We can replace what we had before with the following function:
\end_layout

\begin_layout Standard
\paragraph_spacing single
\begin_inset listings
lstparams "basicstyle={\normalsize\ttfamily},extendedchars=true,language={C++},numbers=left,numberstyle={\footnotesize},tabsize=4"
inline false
status open

\begin_layout Plain Layout
\paragraph_spacing single
\noindent

TIME Person::timeChildEvent()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	TIME waitingTime; //declare variable
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	//take the age and figure out which age group it falls into
\end_layout

\begin_layout Plain Layout

	int ageGroup = SPLIT(age, AGE_GROUPS); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if(RandUniform() < ChildBirthProbability[ageGroup])
\end_layout

\begin_layout Plain Layout

		waitingTime = 0; // make this the next event
\end_layout

\begin_layout Plain Layout

	else
\end_layout

\begin_layout Plain Layout

		waitingTime = TIME_INFINITE;
\end_layout

\begin_layout Plain Layout

	return waitingTime;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
With that we've created a basic model that allows a researcher to enter
 values for the 
\begin_inset listings
lstparams "basicstyle={\ttfamily}"
inline true
status open

\begin_layout Plain Layout

ChildBirthProbability
\end_layout

\end_inset

 parameter, perhaps based on some real data or perhaps in investigating
 a 
\begin_inset Quotes eld
\end_inset

what-if
\begin_inset Quotes erd
\end_inset

 scenario (eg.
 
\begin_inset Quotes eld
\end_inset

what if everyone over 30 stopped having children?
\begin_inset Quotes erd
\end_inset

).
 This model can be compiled and the executable can be distributed online
 to anyone interested in these kinds of problems.
\end_layout

\begin_layout Subsubsection
Visual Interface
\end_layout

\begin_layout Standard
Modgen automatically creates an interface for running, modifying, and saving
 simulations.
 
\end_layout

\begin_layout Standard
The workflow for using a Modgen model is usually something like this: 
\end_layout

\begin_layout Enumerate
\paragraph_spacing single
Specify/Modify the scenario's parameters.
\end_layout

\begin_layout Enumerate
\paragraph_spacing single
Choose a population size.
\end_layout

\begin_layout Enumerate
\paragraph_spacing single
Run the simulation (this generates an output database).
\end_layout

\begin_layout Enumerate
\paragraph_spacing single
View or Export the output tables.
\end_layout

\begin_layout Standard
Figure
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Modgen's-Interface"

\end_inset

 shows an example of the interface that Modgen generates for any model:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename interface.jpg
	scale 50

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Modgen's-Interface"

\end_inset

Modgen's Interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Projects
\end_layout

\begin_layout Standard
Before starting on any projects, the beginning of the work term was spent
 learning about Modgen and microsimulation and practicing with Modgen to
 create some simple models.
 I then used Modgen to participate in two projects.
 The first project was a contract job that came from Health Canada to understand
 costs of home care in the future.
 This required adding a new module in LifePaths written in Modgen.
 The second project was to merge the codebase of different versions of LifePaths
 and to produce a 'clean' and releasable version of LifePaths.
 The merge project involved reorganizing hundreds of lines of Modgen code.
 
\end_layout

\begin_layout Subsection
Homecare Project
\end_layout

\begin_layout Standard
Around the beginning of the work term, the Modelling division was approached
 by Health Canada.
 They wanted to use LifePaths to get an idea of what the costs of senior
 care would be like in the future.
 There was a few weeks of meetings as the project was fleshed out and around
 February it became clear that at least one aspect of the project was to
 add a module to LifePaths that simulated people receiving homecare.
\end_layout

\begin_layout Standard
The first concern was how to define homecare, and where the data would come
 from.
 The plan involved multiple aspects.
 First we had to find some real data on the receipt of homecare to understand
 the amount of detail we could realistically simulate.
 Is there data on different 
\emph on
kinds
\emph default
 of homecare? Could we find out what the proportion of people receiving
 homecare was in different provinces? How about the proportion by different
 ages? The next aspect of the project was to take this data and construct
 a mathematical model.
 With a model, we could write some Modgen code and create a module that
 realistically simulated homecare.
\end_layout

\begin_layout Standard
I participated in finding the data on homecare and in prototyping the early
 stages of the homecare module.
 Other members of the team created the mathematical model and implemented
 it in Modgen.
 
\end_layout

\begin_layout Standard
For our data source we used a survey conducted by StatCan called the National
 Population Health Survey (NPHS).
 This survey asks respondents a multitude of questions about their health
 and lifestyle.
 This included questions about health issues and the type of care received.
 The National Population Health Survey started in 1994 and tries to survey
 the same respondents every two years (this is called a longitudinal survey).
 In addition to the longitudinal component, the NPHS has a large data file
 of respondents who were only surveyed once (this is called a cross-sectional
 survey).
 The respondents of the NPHS were from all across Canada and the cross-sectional
 component had a much larger sample size than the longitudinal component
 so we used the cross-sectional data of 1996 and 1998 to get some information
 about homecare.
 
\end_layout

\begin_layout Standard
Of the tens of thousands of people surveyed there were only about 2500 who
 had received some type of homecare.
 The concept of homecare in NPHS was broken into seven different categories,
 which the team simplified to just three: Nursing homecare, personal homecare,
 and just 
\begin_inset Quotes eld
\end_inset

other
\begin_inset Quotes erd
\end_inset

 homecare.
 This simplification was made because of the very low numbers there were
 for some of the categories.
 Nursing homecare is when a nurse visits the home to provide some medical
 care.
 Personal homecare is care related to day-to-day tasks (meal preparation,
 hygiene)
\end_layout

\begin_layout Subsection
Merge Project
\end_layout

\begin_layout Section
Conclusion
\end_layout

\end_body
\end_document
